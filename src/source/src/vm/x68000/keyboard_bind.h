/** @file keyboard_bind.h

	SHARP X68000 Emulator 'eCZ-600'
	Skelton for retropc emulator

	@author Sasaji
	@date   2022.02.22 -

	@brief [ keyboard bind ]
*/

#include "../vm.h"
#include "../../keycode.h"

#define VK_KEY_TYPE "X68K"

static const uint32_t scan2key_defmap[KEYBIND_KEYS][KEYBIND_ASSIGN]={
// 0x00 - 0x0F
	{0x00,                  0x00}, // 0x00,
	{KEYCODE_ESCAPE,        0x00}, // 0x01, esc
	{KEYCODE_1,             0x00}, // 0x02, 1
	{KEYCODE_2,             0x00}, // 0x03, 2
	{KEYCODE_3,             0x00}, // 0x04, 3
	{KEYCODE_4,             0x00}, // 0x05, 4
	{KEYCODE_5,             0x00}, // 0x06, 5
	{KEYCODE_6,             0x00}, // 0x07, 6
	{KEYCODE_7,             0x00}, // 0x08, 7
	{KEYCODE_8,             0x00}, // 0x09, 8
	{KEYCODE_9,             0x00}, // 0x0A, 9
	{KEYCODE_0,             0x00}, // 0x0B, 0
	{KEYCODE_MINUS,         0x00}, // 0x0C, =-
	{KEYCODE_CARET,         0x00}, // 0x0D, ^
	{KEYCODE_BACKSLASH,     0x00}, // 0x0E, yen(backslash)
	{KEYCODE_BACKSPACE,     0x00}, // 0x0F, bs
// 0x10 - 0x1F
	{KEYCODE_TAB,           0x00}, // 0x10, tab
	{KEYCODE_Q,             0x00}, // 0x11, Q
	{KEYCODE_W,             0x00}, // 0x12, W
	{KEYCODE_E,             0x00}, // 0x13, E
	{KEYCODE_R,             0x00}, // 0x14, R
	{KEYCODE_T,             0x00}, // 0x15, T
	{KEYCODE_Y,             0x00}, // 0x16, Y
	{KEYCODE_U,             0x00}, // 0x17, U
	{KEYCODE_I,             0x00}, // 0x18, I
	{KEYCODE_O,             0x00}, // 0x19, O
	{KEYCODE_P,             0x00}, // 0x1A, P
	{KEYCODE_AT,            0x00}, // 0x1B, @
	{KEYCODE_LBRACKET,      0x00}, // 0x1C, [
	{KEYCODE_RETURN,        0x00}, // 0x1D, return
	{KEYCODE_A,             0x00}, // 0x1E, A
	{KEYCODE_S,             0x00}, // 0x1F, S
// 0x20 - 0x2F
	{KEYCODE_D,             0x00}, // 0x20, D
	{KEYCODE_F,             0x00}, // 0x21, F
	{KEYCODE_G,             0x00}, // 0x22, G
	{KEYCODE_H,             0x00}, // 0x23, H
	{KEYCODE_J,             0x00}, // 0x24, J
	{KEYCODE_K,             0x00}, // 0x25, K
	{KEYCODE_L,             0x00}, // 0x26, L
	{KEYCODE_SEMICOLON,     0x00}, // 0x27, +;
	{KEYCODE_COLON,         0x00}, // 0x28, *:
	{KEYCODE_RBRACKET,      0x00}, // 0x29, ]
	{KEYCODE_Z,             0x00}, // 0x2A, Z
	{KEYCODE_X,             0x00}, // 0x2B, X
	{KEYCODE_C,             0x00}, // 0x2C, C
	{KEYCODE_V,             0x00}, // 0x2D, V
	{KEYCODE_B,             0x00}, // 0x2E, B
	{KEYCODE_N,             0x00}, // 0x2F, N
// 0x30 - 0x3F
	{KEYCODE_M,             0x00}, // 0x30, M
	{KEYCODE_COMMA,         0x00}, // 0x31, <,
	{KEYCODE_PERIOD,        0x00}, // 0x32, >.
	{KEYCODE_SLASH,         0x00}, // 0x33, ?/
	{KEYCODE_UNDERSCORE,    0x00}, // 0x34, _
	{KEYCODE_SPACE,         0x00}, // 0x35, space
	{KEYCODE_HOME,          0x00}, // 0x36, home
	{KEYCODE_DELETE,        0x00}, // 0x37, delete
	{KEYCODE_PAGEUP,        0x00}, // 0x38, roll up
	{KEYCODE_PAGEDOWN,      0x00}, // 0x39, roll down
	{KEYCODE_END,           0x00}, // 0x3A, undo
	{KEYCODE_LEFT,          0x00}, // 0x3B, left
	{KEYCODE_UP,            0x00}, // 0x3C, up
	{KEYCODE_RIGHT,         0x00}, // 0x3D, right
	{KEYCODE_DOWN,          0x00}, // 0x3E, down
	{KEYCODE_NUMLOCK,       0x00}, // 0x3F, cls
// 0x40 - 0x4F
	{KEYCODE_KP_DIVIDE,     0x00}, // 0x40, num/
	{KEYCODE_KP_MULTIPLY,   0x00}, // 0x41, num*
	{KEYCODE_KP_MINUS,      0x00}, // 0x42, num-
	{KEYCODE_KP_7,          0x00}, // 0x43, num7
	{KEYCODE_KP_8,          0x00}, // 0x44, num8
	{KEYCODE_KP_9,          0x00}, // 0x45, num9
	{KEYCODE_KP_PLUS,       0x00}, // 0x46, num+
	{KEYCODE_KP_4,          0x00}, // 0x47, num4
	{KEYCODE_KP_5,          0x00}, // 0x48, num5
	{KEYCODE_KP_6,          0x00}, // 0x49, num6
#if defined(__APPLE__) && defined(__MACH__)
	{KEYCODE_KP_EQUALS,     0x00}, // 0x4A, num=
#else
	{0x00,                  0x00}, // 0x4A, num=
#endif
	{KEYCODE_KP_1,          0x00}, // 0x4B, num1
	{KEYCODE_KP_2,          0x00}, // 0x4C, num2
	{KEYCODE_KP_3,          0x00}, // 0x4D, num3
	{KEYCODE_KP_ENTER,      0x00}, // 0x4E, num enter
	{KEYCODE_KP_0,          0x00}, // 0x4F, num0
// 0x50 - 0x5F
	{KEYCODE_KP_COMMA,      0x00}, // 0x50, num,
	{KEYCODE_KP_PERIOD,     0x00}, // 0x51, num.
#if defined(__APPLE__) && defined(__MACH__)
	{KEYCODE_F17,           0x00}, // 0x52, kigou nyuuryoku
	{KEYCODE_F18,           0x00}, // 0x53, touroku
	{KEYCODE_F19,           0x00}, // 0x54, help
	{KEYCODE_LGUI,          0x00}, // 0x55, XF1
	{KEYCODE_EISU,          0x00}, // 0x56, XF2
	{0x00,                  0x00}, // 0x57, XF3
	{KEYCODE_RGUI,          0x00}, // 0x58, XF4
	{0x00,                  0x00}, // 0x59, XF5
#else
	{0x00,                  0x00}, // 0x52, kigou nyuuryoku
	{0x00,                  0x00}, // 0x53, touroku
	{0x00,                  0x00}, // 0x54, help
	{KEYCODE_MUHENKAN,      0x00}, // 0x55, XF1
	{0x00,                  0x00}, // 0x56, XF2
	{0x00,                  0x00}, // 0x57, XF3
	{0x00,                  0x00}, // 0x58, XF4
	{0x00,                  0x00}, // 0x59, XF5
#endif
#if defined(__APPLE__) && defined(__MACH__)
	{KEYCODE_KANA,          0x00}, // 0x5A, kana
	{0X00,                  0x00}, // 0x5B, roma-ji
	{0x00,                  0x00}, // 0x5C, kana nyuuryoku
	{KEYCODE_CAPSLOCK, KEYCODE_F16}, // 0x5D, caps
	{KEYCODE_INSERT, KEYCODE_FUNCTION}, // 0x5E, insert
#else
	{KEYCODE_GRAVE,         0x00}, // 0x5A, kana
	{KEYCODE_KATAHIRA,      0x00}, // 0x5B, roma-ji
	{0x00,                  0x00}, // 0x5C, kana nyuuryoku
	{KEYCODE_CAPSLOCK,      0x00}, // 0x5D, caps
	{KEYCODE_INSERT,        0x00}, // 0x5E, insert
#endif
	{0x00,                  0x00}, // 0x5F, hiragana
// 0x60 - 0x6F
#if defined(__APPLE__) && defined(__MACH__)
	{0X00,                  0x00}, // 0x60, zenkaku
	{0X00,                  0x00}, // 0x61, break
#else
	{KEYCODE_HENKAN,        0x00}, // 0x60, zenkaku
	{KEYCODE_PAUSE,         0x00}, // 0x61, break
#endif
	{0x00,                  0x00}, // 0x62, copy
	{KEYCODE_F1,            0x00}, // 0x63, F1
	{KEYCODE_F2,            0x00}, // 0x64, F2
	{KEYCODE_F3,            0x00}, // 0x65, F3
	{KEYCODE_F4,            0x00}, // 0x66, F4
	{KEYCODE_F5,            0x00}, // 0x67, F5
	{KEYCODE_F6,            0x00}, // 0x68, F6
	{KEYCODE_F7,            0x00}, // 0x69, F7
	{KEYCODE_F8,            0x00}, // 0x6A, F8
	{KEYCODE_F9,            0x00}, // 0x6B, F9
#if defined(_WIN32)
	{KEYCODE_F11,           0x00}, // 0x6C, F10
#else
	{KEYCODE_F10,           0x00}, // 0x6C, F10
#endif
	{0x00,                  0x00}, // 0x6D
	{0x00,                  0x00}, // 0x6E
	{0x00,                  0x00}, // 0x6F
// 0x70 - 0x7F
	{KEYCODE_LSHIFT, KEYCODE_RSHIFT}, // 0x70, shift
	{KEYCODE_LCTRL,  KEYCODE_RCTRL},  // 0x71, ctrl
	{0x00,                  0x00}, // 0x72, opt1
	{0x00,                  0x00}, // 0x73, opt2
	{0x00,                  0x00}, // 0x74
	{0x00,                  0x00}, // 0x75
	{0x00,                  0x00}, // 0x76
	{0x00,                  0x00}, // 0x77
	{0x00,                  0x00}, // 0x78
	{0x00,                  0x00}, // 0x79
	{0x00,                  0x00}, // 0x7A
	{0x00,                  0x00}, // 0x7B
	{0x00,                  0x00}, // 0x7C
	{0x00,                  0x00}, // 0x7D
	{0x00,                  0x00}, // 0x7E
	{0x00,                  0x00}, // 0x7F
// 0x80 - 0x8F (emulator original)
	{0x00,                  0x00}, // 0x80, (pause)
	{KEYCODE_LALT,  KEYCODE_RALT}, // 0x81, (alt)
#if defined(__APPLE__) && defined(__MACH__)
	{KEYCODE_F13,           0x00}, // 0x82, (mouse)
#else
	{KEYCODE_F12,           0x00}, // 0x82, (mouse)
#endif
	{0x00,                  0x00}, // 0x83
	{0x00,                  0x00}, // 0x84, nmi
	{0x00,                  0x00}, // 0x85, power
	{0x00,                  0x00}, // 0x86, reset
	{0x00,                  0x00}  // 0x87, (property)
};

/// joypad button -> key assign
static const uint32_t joy2key_defmap[KEYBIND_KEYS][KEYBIND_ASSIGN]={
//               esc         1           2           3           4           5           6
//   0x00,       0x01,       0x02,       0x03,       0x04,       0x05,       0x06,       0x07,
	{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},
//   7           8           9           0           - =         ^           yen         bs
//   0x08,       0x09,       0x0a,       0x0b,       0x0c,       0x0d,       0x0e,       0x0f,
	{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},
//   tab         Q           W           E           R           T           Y           U
//   0x10,       0x11,       0x12,       0x13,       0x14,       0x15,       0x16,       0x17,
	{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},
//   I           O           P           @           [           return      A           S
//   0x18,       0x19,       0x1a,       0x1b,       0x1c,       0x1d,       0x1e,       0x1f,
	{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},
//   D           F           G           H           J           K           L           ; +
//   0x20,       0x21,       0x22,       0x23,       0x24,       0x25,       0x26,       0x27,
	{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},
//   : *         ]           Z           X           C           V           B           N
//   0x28,       0x29,       0x2a,       0x2b,       0x2c,       0x2d,       0x2e,       0x2f,
	{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},
//   M           , <         . >         / ?         _           space                home        del
//   0x30,       0x31,       0x32,       0x33,       0x34,       0x35,                0x36,       0x37,
	{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{JOYCODE_BTN_A,0x00},{0x00,0x00},{0x00,0x00},
//   roll up     roll down   undo        left                up                right                down                clr
//   0x38,       0x39,       0x3a,       0x3b,               0x3c,             0x3d,                0x3e,               0x3f,
	{0x00,0x00},{0x00,0x00},{0x00,0x00},{JOYCODE_LEFT,0x00},{JOYCODE_UP,0x00},{JOYCODE_RIGHT,0x00},{JOYCODE_DOWN,0x00},{0x00,0x00},
//   num/        num*        num-        num7                  num8              num9                   num+        num4
//   0x40,       0x41,       0x42,       0x43,                 0x44,             0x45,                  0x46,       0x47,
	{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,JOYCODE_UPLEFT},{0x00,JOYCODE_UP},{0x00,JOYCODE_UPRIGHT},{0x00,0x00},{0x00,JOYCODE_LEFT},
//   num5        num6                 num=        num1                    num2                num3                     num enter            num0
//   0x48,       0x49,                0x4a,       0x4b,                   0x4c,               0x4d,                    0x4e,                0x4f,
	{0x00,0x00},{0x00,JOYCODE_RIGHT},{0x00,0x00},{0x00,JOYCODE_DOWNLEFT},{0x00,JOYCODE_DOWN},{0x00,JOYCODE_DOWNRIGHT},{0x00,JOYCODE_BTN_A},{0x00,0x00},
//   num,        num.        kigou       toroku      help        XF1         XF2         XF3
//   0x50,       0x51,       0x52,       0x53,       0x54,       0x55,       0x56,       0x57,
	{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},
//   XF4         XF5         kana        romaji      kana in     caps                    hiragana
//   0x58,       0x59,       0x5a,       0x5b,       0x5c,       0x5d,       0x5e,       0x5f,
	{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},
//   zenkaku     break       copy        F1          F2          F3          F4          F5
//   0x60,       0x61,       0x62,       0x63,       0x64,       0x65,       0x66,       0x67,
	{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},
//   F6          F7          F8          F9          F10
//   0x68,       0x69,       0x6a,       0x6b,       0x6c,       0x6d,       0x6e,       0x6f,
	{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},
//   shift       ctrl        opt1        opt2
//   0x70,       0x71,       0x72,       0x73,       0x74,       0x75,       0x76,       0x77,
	{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},
//
//   0x78,       0x79,       0x7a,       0x7b,       0x7c,       0x7d,       0x7e,       0x7f,
	{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},
//  (pause)      (alt)                                                       reset
//   0x80        0x81        0x82        0x83        0x84        0x85        0x86        0x87
	{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00}
};

static const uint16_t sjoy2joy_typemap[KEYBIND_JOYS] = {
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0x1000, 0x1000, 0x1000, 0x1000, 0, 0,
	0, 0
};

/// joypad button -> PPI joystick assign
static const uint32_t sjoy2joy_defmap[KEYBIND_JOYS][KEYBIND_ASSIGN] = {
// 0x00- 0x07
	{JOYCODE_UP,		JOYCODE_UP},		// 0x00 up
	{JOYCODE_DOWN,		JOYCODE_DOWN},		// 0x01 down
	{JOYCODE_LEFT,		JOYCODE_LEFT},		// 0x02 left
	{JOYCODE_RIGHT,		JOYCODE_RIGHT},		// 0x03 right
	{JOYCODE_R_UP,		JOYCODE_R_UP},		// 0x04 yet another up
	{JOYCODE_R_DOWN,	JOYCODE_R_DOWN},	// 0x05 yet another down
	{JOYCODE_Z_LEFT,	JOYCODE_Z_LEFT},	// 0x06 yet another left
	{JOYCODE_Z_RIGHT,	JOYCODE_Z_RIGHT},	// 0x07 yet another right
// 0x08 - 0x0f
	{JOYCODE_BTN_A,		JOYCODE_BTN_A},		// 0x08 button A
	{JOYCODE_BTN_B,		JOYCODE_BTN_B},		// 0x09 button B
	{JOYCODE_BTN_C,		JOYCODE_BTN_C},		// 0x0A button C
	{JOYCODE_BTN_D,		JOYCODE_BTN_D},		// 0x0B button X
	{JOYCODE_BTN_E,		JOYCODE_BTN_E},		// 0x0C button Y
	{JOYCODE_BTN_F,		JOYCODE_BTN_F},		// 0x0D button Z
	{JOYCODE_BTN_G,		JOYCODE_BTN_G},		// 0x0E button L
	{JOYCODE_BTN_H,		JOYCODE_BTN_H},		// 0x0F button R
// 0x10 - 0x17
	{JOYCODE_BTN_I,		JOYCODE_BTN_I},		// 0x10 select
	{JOYCODE_BTN_J,		JOYCODE_BTN_J},		// 0x11 start
	{JOYCODE_ANA_X,		JOYCODE_ANA_X},		// 0x12 left analog X
	{JOYCODE_ANA_Y,		JOYCODE_ANA_Y},		// 0x13 left analog Y
	{JOYCODE_ANA_Z,		JOYCODE_ANA_Z},		// 0x14 right analog X
	{JOYCODE_ANA_R,		JOYCODE_ANA_R},		// 0x15 right analog Y
	{0x00,				0x00},
	{0x00,				0x00},
// 0x18 - 0x1b
	{0x00,				0x00},
	{0x00,				0x00},
	{0x00,				0x00},
	{0x00,				0x00},				// property
};

/// keyboard -> PPI joystick assign
static const uint32_t scan2joy_defmap[KEYBIND_JOYS][KEYBIND_ASSIGN] = {
// 0x00- 0x07
	{0x00,				0x00},				// 0x00
	{KEYCODE_KP_8,		KEYCODE_UP},		// 0x01 up
	{KEYCODE_KP_2,		KEYCODE_DOWN},		// 0x02 down
	{0x00,				0x00},				// 0x03
	{KEYCODE_KP_4,		KEYCODE_LEFT},		// 0x04 left
	{KEYCODE_KP_7,		0x00},				// 0x05 up+left
	{KEYCODE_KP_1,		0x00},				// 0x06 down+left
	{0x00,				0x00},				// 0x07
// 0x08 - 0x0f
	{KEYCODE_KP_6,		KEYCODE_RIGHT},		// 0x08 right
	{KEYCODE_KP_9,		0x00},				// 0x09 up+right
	{KEYCODE_KP_3,		0x00},				// 0x0A down+right
	{0x00,				0x00},
	{KEYCODE_Z,			KEYCODE_N},			// 0x0C button A
	{KEYCODE_X,			KEYCODE_M},			// 0x0D button B
	{KEYCODE_C,			KEYCODE_COMMA},		// 0x0E button C
	{KEYCODE_A,			KEYCODE_H},			// 0x0F button D, X
// 0x10 - 0x17
	{KEYCODE_S,			KEYCODE_J},			// 0x10 button E1, Y
	{KEYCODE_D,			KEYCODE_K},			// 0x11 button E2, Z
	{KEYCODE_C,			KEYCODE_COMMA},		// 0x12 button L
	{KEYCODE_D,			KEYCODE_K},			// 0x13 button R
	{KEYCODE_SPACE,		0x00},				// 0x14 select
	{KEYCODE_RETURN,	0x00},				// 0x15 start
	{0x00,				0x00},
	{0x00,				0x00},
// 0x18 - 0x1b
	{0x00,				0x00},
	{0x00,				0x00},
	{0x00,				0x00},
	{0x00,				0x00},				// property
};

/// for keybind dialog box
static const uint16_t kb_scan2key_map[128] = {
//  0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f
//  0x0
	0xff,0x85,0x86,0x84,0x82,0x80,0x81,0x5e,0x37,0x0f,0x10,0x61,0x36,0x3f,0x1d,0x4e,
//  0x1
	0x70,0x71,0x5d,0x5a,0x5b,0x5c,0x5f,0x60,0x52,0x53,0x62,0x01,0x3d,0x3b,0x3c,0x3e,
//  0x2
	0x35,0x38,0x39,0x3a,0x54,0xff,0xff,0xff,0xff,0x55,0x56,0x57,0x58,0x59,0x72,0x73,
//  0x3
	0x0b,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x28,0x27,0x31,0x0c,0x32,0x33,
//  0x4
	0x1b,0x1e,0x2e,0x2c,0x20,0x13,0x21,0x22,0x23,0x18,0x24,0x25,0x26,0x30,0x2f,0x19,
//  0x5
	0x1a,0x11,0x14,0x1f,0x15,0x17,0x2d,0x12,0x2b,0x16,0x2a,0x1c,0x0e,0x29,0x0d,0x34,
//  0x6
	0x4f,0x4b,0x4c,0x4d,0x47,0x48,0x49,0x43,0x44,0x45,0x41,0x46,0x4a,0x42,0x50,0x51,
//  0x7
	0x40,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0xff,0xff,0xff,0xff,0xff
};

/// @note index is number in enVmJoyLabels using cVmJoyLabels[]
static const uint16_t kb_sjoy2joy_map[] = {
//  0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f
	0xff,0x00,0xff,0x03,0xff,0x01,0xff,0x02,0xff,0x04,0xff,0x07,0xff,0x05,0xff,0x06,
	0xff,0xff,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0xff,
	0x1012,0x1013,0x1014,0x1015
};

/// @note index is number in enVmJoyLabels using cVmJoyLabels[]
static const uint16_t kb_scan2joy_map[] = {
//  0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f
	0xff, 0x01, 0x09, 0x08, 0x0a, 0x02, 0x06, 0x04, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x10c,0x10d,0x10e,0x10f,0x110,0x111,0x112,0x113,0x114,0x115,0xff, 0xff, 0xff, 0xff,
	0xff
};
